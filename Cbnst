//Lagrange Interpolation Method
#include <iostream>

using namespace std;

int main(){

    float x[100],y[100],xp,yp=0,p;

    int n; cin>>n;

    cout<<"\nenter the data :\n";

    for(int i=0;i<n;i++){

        cin>>x[i]>>y[i];

    }

    cout<<"enter interpolation point:"; cin>>xp;

    for(int i=0;i<n;i++){

        p=1;

        for(int j=0;j<n;j++){

            if(i!=j){

                p=p*(xp-x[j])/(x[i]-x[j]);

            }

        }

        yp+=p*y[i];

    }

    cout<<"\n ans:"<<xp<<"\n"<<yp;

    return 0;

}

//Regula Falsi


#include <iostream>

using namespace std;

# define f(x) (x*x-2*x-5)

const double eps=0.1;

int main(){

   double a=0,b=4;

   double y1,y2,x,y;

   y1=f(a);

   y2=f(b);

   x=(a*y2-b*y1)/(y2-y1);

   y=f(x);

   int n=20;

   while(n--){

       if(y<0)

          { a=x;y1=y;}

       else if(y>eps){

               b=x;y2=y;

           } 

       cout<<a<<" "<<b<<" "<<y1<<" " <<y2<<endl;

       x=(a*y2-b*y1)/(y2-y1);

       y=f(x);

       }

       cout<<x<<endl;

    return 0;

}
//Errors...
#include <iostream>

#include<math.h>

using namespace std;

#define f(x)(x*x*x-x*x+2)

#define e 0.01

int main(){

   double abs_error,rel_error,p_error,t_val,a_val;

   cin>>t_val>>a_val;

   abs_error=abs(t_val-a_val);

   rel_error=abs_error/t_val;

   p_error=rel_error*100;

   cout<<abs_error<<" "<<rel_error<<" "<<p_error;

}
//Bisection Method

#include <iostream>

using namespace std;

#define f(x)(x*x*x-x*x+2)

#define e 0.01

int main(){

   double a,b;

   cin>>a>>b;

   if(f(a)*f(b)>=0) cout<<"error";

   else{

       double c=a;

       while((b-a)>=e){

           c=(a+b)/2;

           if(f(c)==0.0)break;

           else if(f(c)*f(a)<0) b=c;

           else a=c;

       }

       cout<<c;

   }

}
//Newton forward interpolation 
#include <iostream>

using namespace std;

float u_cal(float u,int n){

    float temp=u;

    for(int i=1;i<n;i++){

        temp*=(u-i);

    }

    return temp;

}

int fact(int n){

    int f=1;

    for(int i=2;i<=n;i++) f*=i;

    return f;

}

int main(){

    int n=4;

    float x[]={45,50,55,60};

    float y[n][n];

    y[0][0]=0.7071;

    y[1][0]=0.7660;

    y[2][0]=0.8192;

    y[3][0]=0.8660;

    for(int i=1;i<n;i++){

        for(int j=0;j<n-i;j++) y[j][i]=y[j+1][i-1]-y[j][i-1];

    }

   float value=52;

   float sum=y[0][0];

   float u=(value-x[0])/(x[1]-x[0]);

   for(int i=1;i<n;i++){

       sum+=(u_cal(u,i)*y[0][i])/fact(i);

   }

   cout<<value<<endl<<sum;

    return 0;

}
//Newton Backward Interpolation
#include <iostream>

using namespace std;

float u_cal(float u,int n){

    float temp=u;

    for(int i=1;i<n;i++){

        temp*=(u+i);

    }

    return temp;

}

int fact(int n){

    int f=1;

    for(int i=2;i<=n;i++) f*=i;

    return f;

}

int main(){

    int n=4;

    float x[]={45,50,55,60};

    float y[n][n];

    y[0][0]=0.7071;

    y[1][0]=0.7660;

    y[2][0]=0.8192;

    y[3][0]=0.8660;

    for(int i=1;i<n;i++){

        for(int j=n-1;j>=0;j--) y[j][i]=y[j][i-1]-y[j-1][i-1];

    }

   float value=52;

   float sum=y[n-1][0];

   float u=(value-x[n-1])/(x[1]-x[0]);

   for(int i=1;i<n;i++){

       sum+=(u_cal(u,i)*y[n-1][i])/fact(i);

   }

   cout<<value<<endl<<sum;

    return 0;

}
//Stirling Method#include <bits/stdc++.h>

using namespace std;

 

// Function to calculate value using

// Stirling formula

void Stirling(float x[], float fx[], float x1,

                                    int n)

{

    float h, a, u, y1 = 0, N1 = 1, d = 1,

    N2 = 1, d2 = 1, temp1 = 1, temp2 = 1,

    k = 1, l = 1, delta[n][n];

   

    int i, j, s;

    h = x[1] - x[0];

    s = floor(n / 2);

    a = x[s];

    u = (x1 - a) / h;

 

    // Preparing the forward difference

    // table

    for (i = 0; i < n - 1; ++i) {

        delta[i][0] = fx[i + 1] - fx[i];

    }

    for (i = 1; i < n - 1; ++i) {

        for (j = 0; j < n - i - 1; ++j) {

            delta[j][i] = delta[j + 1][i - 1]

                          - delta[j][i - 1];

        }

    }

 





    y1 = fx[s];

 

    for (i = 1; i <= n - 1; ++i) {

        if (i % 2 != 0) {

            if (k != 2) {

                temp1 *= (pow(u, k) -

                          pow((k - 1), 2));

            }

            else {

                temp1 *= (pow(u, 2) -

                          pow((k - 1), 2));

            }

            ++k;

            d *= i;

            s = floor((n - i) / 2);

            y1 += (temp1 / (2 * d)) *

                   (delta[s][i - 1] +

                   delta[s - 1][i - 1]);

        }

        else {

            temp2 *= (pow(u, 2) -

                      pow((l - 1), 2));

            ++l;

            d *= i;

            s = floor((n - i) / 2);

            y1 += (temp2 / (d)) *

                  (delta[s][i - 1]);

        }

    }

 

    cout << y1;

}

 

// Driver main function

int main()

{

    int n;

    n = 5;

    float x[] = { 0, 0.5, 1.0, 1.5, 2.0 };

    float fx[] = { 0, 0.191, 0.341, 0.433,

                             0.477 };

 

    // Value to calculate f(x)

    float x1 = 1.22;

 

    Stirling(x, fx, x1, n);

    return 0;

}
// Gauss forward Interpolation
#include<iostream.h>

#include<conio.h>

#include<math.h>

void main()

{

int n;                         

int i,j;                       

float ax[10];                   

float ay[10];                   

float x;                       

float nr,dr;

float y=0;                      

float h;                        

float p;                        

float diff[20][20];             

float y1,y2,y3,y4;              

clrscr();

cout<<"GAUSS' FORWARD INTERPOLATION FORMULA !! ";

cout<<"\nEnter the no. of terms";

cin>>n;

cin>>"\n\n Enter the value in the form of x";

for(i=0;i<n;i++)

   {

   cout<<"\n Enter the value of x "<<i+1;

   cin>>ax[i];

   }

cout<<"\n Enter the value in the form of y";

for(i=0;i<n;i++)

   {

   cout<<"\n Enter the value of y"<<i+1;

   cin>>ay[i];

   }

cout<<"\n\n Enter the value of x for ";

cout<<"\n which u want the value of y";

cin>>x;

h=ax[1]-ax[0];

for(i=0;i<n-1;i++)

   diff[i][1]=ay[i+1]-ay[i];

for(j=2;j<=4;j++)

   for(i=0;i<n-j;i++)

      diff[i][j]=diff[i+1][j-1]-diff[i][j-1];

i=0;

do

 {

 i++;

 }

while(ax[i]<x);

i--;

p=(x-ax[i])/h;

y1=p*diff[i][1];

y2=p*(p-1)*diff[i-1][2]/2;

y3=(p+1)*p*(p-1)*diff[i-2][3]/6;

y4=(p+1)*p*(p-1)*(p-2)*diff[i-3][4]/24;

y=ay[i]+y1+y2+y3+y4;

cout<<"\t\t"<<x<<"\t\t"<<y;

getch();

}
//Gauss backward interpolation
#include<stdio.h>

#include<conio.h>

#include<math.h>

#include<process.h>

#include<conio.h>

void main()

{

int n;                          // no. of terms.

int i,j;                        // Loop variables

float ax[10];                   // 'X' array limit 9

float ay[10];                   // 'Y' array limit 9

float x;                        // User Query for what value of X

float y=0;                      // Calculated value for coressponding X.

float h;                        // Calc. Section

float p;                        // Calc. Section

float diff[20][20];             // to store Y

float y1,y2,y3,y4;              // Formulae variables.

clrscr();

printf("\t\t !! GAUSS' FORWARD INTERPOLATION FORMULA !! ");

// Input section.

printf("\n\n Enter the no. of terms -> ");

scanf("%d",&n);

// Input Sequel for array X

printf("\n\n Enter the value in the form of x -> ");

// Input loop for X.

for(i=0;i<n;i++)

   {

   printf("\n Enter the value of x%d -> ",i+1);

   scanf("%f",&ax[i]);

   }

// Input sequel for array Y.

printf("\n\n Enter the value in the form of y -> ");

// Input loop for Y.

for(i=0;i<n;i++)

   {

   printf("\n Enter the value of y%d -> ",i+1);

   scanf("%f",&ay[i]);

   }

// Inputting the required value quarry

printf("\n\n Enter the value of x for ");

printf("\n which u want the value of y -> ");

scanf("%f",&x);

// Calculation and processing section.

h=ax[1]-ax[0];

for(i=0;i<n-1;i++)

   diff[i][1]=ay[i+1]-ay[i];

for(j=2;j<=4;j++)

   for(i=0;i<n-j;i++)

      diff[i][j]=diff[i+1][j-1]-diff[i][j-1];

i=0;

do

 {

 i++;

 }

while(ax[i]<x);

i--;

p=(x-ax[i])/h;

y1=p*diff[i-1][1];

y2=p*(p+1)*diff[i-1][2]/2;

y3=(p+1)*p*(p-1)*diff[i-2][3]/6;

y4=(p+2)*(p+1)*p*(p-1)*diff[i-3][4]/24;

// Taking sum

y=ay[i]+y1+y2+y3+y4;

// Outut Section

printf("\n When x = %6.4f , y = %6.4f",x,y);

// Invoke user watch halt function

printf("\n\n\n\t\t\t !! PRESS ENTER TO EXIT !! ");

getch();

}
